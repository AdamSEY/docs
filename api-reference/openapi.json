{
  "openapi": "3.1.0",
  "info": {
    "title": "Migma.ai API - Project Import & Email Generation (v1)",
    "description": "API endpoints for importing brand projects from websites and generating emails based on project data.",
    "license": { "name": "MIT" },
    "version": "1.0.0"
  },
  "servers": [
    { "url": "https://api.migma.ai", "description": "Production" },
    { "url": "https://api-test.migma.ai", "description": "Development" }
  ],
  "security": [ { "bearerAuth": [] } ],
  "paths": {
    "/v1/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "List Projects",
        "description": "List projects for the authenticated user with basic information only. Use GET /v1/projects/{projectId} to get full project details.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return (max 100)",
            "schema": { "type": "integer", "format": "int32", "default": 20 }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by project status (pending|processing|active|error)",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects list response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseProjectsList" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/projects/{projectId}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get Project Details",
        "description": "Get complete project details by ID, including branding information, colors, typography, and all project data.",
        "parameters": [
          { "$ref": "#/components/parameters/ProjectIdParam" }
        ],
        "responses": {
          "200": {
            "description": "Project response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseProject" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/projects/import": {
      "post": {
        "tags": ["Import"],
        "summary": "Import Project",
        "description": "Import a brand project from one or more website URLs. Optionally include logo URLs to skip AI logo extraction.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ImportProjectRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import started",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseImportStarted" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/projects/import/{projectId}/status": {
      "get": {
        "tags": ["Import"],
        "summary": "Get Import Status",
        "description": "Check the status of a project import.",
        "parameters": [ { "$ref": "#/components/parameters/ProjectIdParam" } ],
        "responses": {
          "200": {
            "description": "Import status response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseImportStatus" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/projects/import/{projectId}/retry": {
      "post": {
        "tags": ["Import"],
        "summary": "Retry Import",
        "description": "Retry a failed or stuck import for the given project.",
        "parameters": [ { "$ref": "#/components/parameters/ProjectIdParam" } ],
        "responses": {
          "200": {
            "description": "Retry initiated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseImportRetry" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/projects/emails/generate": {
      "post": {
        "tags": ["Email"],
        "summary": "Generate Email (Async)",
        "description": "Generate an email for a project using its brand context and optional images. Returns immediately with a conversationId and 'pending' status. Use GET /v1/projects/emails/{conversationId}/status to check progress and retrieve the result.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GenerateEmailRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email generation started",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseGenerateEmail" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/projects/emails/{conversationId}/status": {
      "get": {
        "tags": ["Email"],
        "summary": "Get Email Generation Status",
        "description": "Check the status of an email generation and retrieve the result when completed.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "description": "The conversation ID returned from the generate endpoint",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Email status retrieved",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseEmailStatus" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/subscribers": {
      "get": {
        "tags": ["Audience"],
        "summary": "List Subscribers",
        "description": "List subscribers for a project. Requires API key with AUDIENCE_READ.",
        "parameters": [
          { "name": "projectId", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20, "maximum": 100 } },
          { "name": "tags", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated tag names" },
          { "name": "status", "in": "query", "schema": { "type": "string", "enum": ["active", "unsubscribed", "bounced", "complained"] } },
          { "name": "search", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Subscribers list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseSubscribersList" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      },
      "post": {
        "tags": ["Audience"],
        "summary": "Add Subscriber",
        "description": "Add a single subscriber. Requires API key with AUDIENCE_WRITE.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddSubscriberRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscriber created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseSubscriber" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/subscribers/bulk": {
      "post": {
        "tags": ["Audience"],
        "summary": "Bulk Import Subscribers",
        "description": "Bulk import subscribers. Requires API key with AUDIENCE_WRITE.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BulkImportSubscribersRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk import result",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseBulkImportResult" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/subscribers/unsubscribe": {
      "post": {
        "tags": ["Audience"],
        "summary": "Unsubscribe Subscriber",
        "description": "Unsubscribe a subscriber by email. Requires API key with AUDIENCE_WRITE.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UnsubscribeRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unsubscribe success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseSuccess" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/export/html/{conversationId}": {
      "get": {
        "tags": ["Export"],
        "summary": "Export HTML",
        "description": "Export conversation as standard HTML.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "description": "The conversation ID to export",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "HTML export successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseExport" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/export/klaviyo/{conversationId}": {
      "get": {
        "tags": ["Export"],
        "summary": "Export Klaviyo",
        "description": "Export conversation as Klaviyo-compatible HTML with editable regions.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "description": "The conversation ID to export",
            "schema": { "type": "string" }
          },
          {
            "name": "klaviyoType",
            "in": "query",
            "description": "Type of Klaviyo export: 'html' for static HTML or 'hybrid' for dynamic hybrid with editable regions",
            "schema": { "type": "string", "enum": ["html", "hybrid"], "default": "hybrid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Klaviyo export successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseExport" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/export/mailchimp/{conversationId}": {
      "get": {
        "tags": ["Export"],
        "summary": "Export Mailchimp",
        "description": "Export conversation as Mailchimp-compatible HTML. Returns URLs for file downloads.",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "description": "The conversation ID to export",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailchimp export successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseExport" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/export/hubspot": {
      "post": {
        "tags": ["Export"],
        "summary": "Export HubSpot",
        "description": "Export conversation as HubSpot-compatible HTML and HubL files.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conversationId": {
                    "type": "string",
                    "description": "The conversation ID to export"
                  },
                  "customOptions": {
                    "type": "object",
                    "description": "Custom options for HubSpot export",
                    "properties": {
                      "customInstructions": {
                        "type": "string",
                        "description": "Custom instructions for the export"
                      }
                    }
                  }
                },
                "required": ["conversationId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "HubSpot export successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseExport" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/export/status/{conversationId}": {
      "get": {
        "tags": ["Export"],
        "summary": "Get Export Status",
        "description": "Check export availability for a conversation",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "description": "The conversation ID to check",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Export status retrieved",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseExportStatus" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/export/formats": {
      "get": {
        "tags": ["Export"],
        "summary": "List Export Formats",
        "description": "Get available export formats",
        "responses": {
          "200": {
            "description": "Available export formats retrieved",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseExportFormats" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/webhooks": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "List Webhooks",
        "description": "Get all webhook configurations for the authenticated user. Requires API key with WEBHOOK_READ permission.",
        "responses": {
          "200": {
            "description": "Webhooks list retrieved",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseWebhooksList" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      },
      "post": {
        "tags": ["Webhooks"],
        "summary": "Create Webhook",
        "description": "Create a new webhook endpoint to receive event notifications. Requires API key with WEBHOOK_WRITE permission. The webhook secret is only returned once upon creation.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateWebhookRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseWebhookCreated" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/webhooks/stats": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get Webhook Statistics",
        "description": "Get overall webhook delivery statistics for your account. Requires API key with WEBHOOK_READ permission.",
        "responses": {
          "200": {
            "description": "Webhook statistics retrieved",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseWebhookStats" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/webhooks/events": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "List Available Events",
        "description": "Get a list of all available webhook event types. Requires API key with WEBHOOK_READ permission.",
        "responses": {
          "200": {
            "description": "Event types retrieved",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseWebhookEvents" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/webhooks/{webhookId}": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get Webhook Details",
        "description": "Get detailed information about a specific webhook, including the secret. Requires API key with WEBHOOK_READ permission.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "description": "Webhook ID (MongoDB ObjectId)",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook details retrieved",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseWebhookDetail" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "patch": {
        "tags": ["Webhooks"],
        "summary": "Update Webhook",
        "description": "Update webhook configuration. Requires API key with WEBHOOK_WRITE permission.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "description": "Webhook ID (MongoDB ObjectId)",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateWebhookRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseSuccess" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "delete": {
        "tags": ["Webhooks"],
        "summary": "Delete Webhook",
        "description": "Permanently delete a webhook configuration. Requires API key with WEBHOOK_WRITE permission.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "description": "Webhook ID (MongoDB ObjectId)",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook deleted successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseSuccess" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/webhooks/{webhookId}/test": {
      "post": {
        "tags": ["Webhooks"],
        "summary": "Test Webhook",
        "description": "Send a test event to verify your webhook endpoint is working correctly. Requires API key with WEBHOOK_WRITE permission.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "description": "Webhook ID (MongoDB ObjectId)",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook test completed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseWebhookTest" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/webhooks/{webhookId}/deliveries": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get Webhook Deliveries",
        "description": "View recent delivery attempts for a webhook, including successes and failures. Requires API key with WEBHOOK_READ permission.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "description": "Webhook ID (MongoDB ObjectId)",
            "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of deliveries to return (max 100)",
            "schema": { "type": "integer", "default": 50, "maximum": 100 }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook deliveries retrieved",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseWebhookDeliveries" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    }
  },

  "components": {
    "parameters": {
      "ProjectIdParam": {
        "name": "projectId",
        "in": "path",
        "required": true,
        "description": "Project ID (MongoDB ObjectId)",
        "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" }
      }
    },

    "responses": {
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/ApiError" } }
        }
      }
    },

    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "nullable": true },
          "error": { "type": "string", "nullable": true }
        },
        "required": ["success"]
      },

      "ApiError": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "default": false },
          "error": { "type": "string" }
        },
        "required": ["success", "error"]
      },

      "LogoUrls": {
        "type": "object",
        "properties": {
          "primary": { "type": "string", "format": "uri" },
          "secondary": { "type": "string", "format": "uri" },
          "favicon": { "type": "string", "format": "uri" }
        },
        "additionalProperties": false
      },

      "ImportProjectRequest": {
        "type": "object",
        "properties": {
          "urls": {
            "type": "array",
            "items": { "type": "string", "format": "uri" },
            "minItems": 1,
            "maxItems": 10
          },
          "logoUrls": { "$ref": "#/components/schemas/LogoUrls" }
        },
        "required": ["urls"]
      },

      "ImportStartedData": {
        "type": "object",
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "status": { "type": "string", "enum": ["pending"] },
          "domain": { "type": "string" },
          "urls": { "type": "array", "items": { "type": "string", "format": "uri" } },
          "message": { "type": "string" }
        },
        "required": ["projectId", "status", "domain", "urls"]
      },

      "ImportStatusProgress": {
        "type": "object",
        "properties": {
          "stage": { "type": "string", "enum": ["initializing", "analyzing", "completed", "failed", "pending", "processing", "unknown"] },
          "percentage": { "type": "integer", "format": "int32", "minimum": 0, "maximum": 100 }
        },
        "required": ["stage", "percentage"]
      },

      "ImportStatusData": {
        "type": "object",
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "status": { "type": "string", "enum": ["pending", "processing", "active", "error"] },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "domain": { "type": "string" },
          "error": { "type": "string", "nullable": true },
          "progress": { "$ref": "#/components/schemas/ImportStatusProgress" }
        },
        "required": ["status", "name", "description", "progress"]
      },

      "ImportRetryData": {
        "type": "object",
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "status": { "type": "string", "enum": ["pending"] },
          "message": { "type": "string" }
        },
        "required": ["status"]
      },

      "EmailImageSource": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["url"], "default": "url" },
          "url": { "type": "string", "format": "uri" }
        },
        "required": ["type", "url"]
      },

      "EmailImage": {
        "type": "object",
        "properties": {
          "source": { "$ref": "#/components/schemas/EmailImageSource" }
        },
        "required": ["source"]
      },

      "GenerateEmailRequest": {
        "type": "object",
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "prompt": { "type": "string" },
          "images": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EmailImage" },
            "maxItems": 5
          },
          "model": { "type": "string", "default": "migmaAI-model-v0.1" },
          "webMode": { "type": "boolean", "default": true,
            "description": "Allow MigmaAI to do research, use connectors, mcp and more. It may take longer to generate the email. Use only if the prompt is unclear or requires additional information."},
          "languages": {
            "type": "array",
            "items": { "type": "string" },
            "maxItems": 5,
            "description": "The languages to generate the email in. If not provided, the email will be generated as instructed by the prompt."
          },
          "visibility": {
            "type": "string",
            "enum": ["private", "unlisted", "public"],
            "default": "private",
            "description": "Set the visibility of the generated conversation. Private conversations are only visible to the user, unlisted conversations are accessible via direct link but not listed publicly, and public conversations are visible in the public gallery."
          }
        },
        "required": ["projectId", "prompt"]
      },

      "GenerateEmailData": {
        "type": "object",
        "properties": {
          "conversationId": { "type": "string", "description": "The conversation ID to check status and retrieve results" },
          "status": { "type": "string", "enum": ["pending"], "description": "Initial status is always pending" },
          "message": { "type": "string", "description": "Information message about the generation process" }
        },
        "required": ["conversationId", "status", "message"]
      },

      "EmailStatusData": {
        "type": "object",
        "properties": {
          "conversationId": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "processing", "completed", "failed"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "error": { "type": "string", "description": "Error message if status is failed" },
          "result": {
            "type": "object",
            "description": "Email generation result (only present when status is completed)",
            "properties": {
              "content": { "type": "string" },
              "reactEmail": { "type": "string" },
              "html": { "type": "string" },
              "klaviyoHtml": { "type": "string" },
              "metadata": {
                "type": "object",
                "properties": {
                  "model": { "type": "string" },
                  "generationTime": { "type": "number" },
                  "inputTokens": { "type": "number" },
                  "outputTokens": { "type": "number" }
                }
              },
              "languages": { "type": "array", "items": { "type": "string" } },
              "enhancedPrompt": { "type": "string" }
            }
          }
        },
        "required": ["conversationId", "status", "createdAt", "updatedAt"]
      },

      "Project": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "processing", "active", "error"] },
          "companyDetails": { "type": "object", "additionalProperties": true },
          "logoUrls": { "$ref": "#/components/schemas/LogoUrls" },
          "imageUrls": { "type": "array", "items": { "type": "object", "additionalProperties": true } },
          "typography": { "type": "object", "additionalProperties": true },
          "colors": { "type": "object", "additionalProperties": true },
          "screenshotUrl": { "type": "string", "format": "uri" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "additionalProperties": true
      },

      "ProjectBasic": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "processing", "active", "error"] },
          "domain": { "type": "string" },
          "logoUrls": { "$ref": "#/components/schemas/LogoUrls" },
          "screenshotUrl": { "type": "string", "format": "uri" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["_id", "name", "description", "status", "createdAt", "updatedAt"]
      },

      "Pagination": {
        "type": "object",
        "properties": {
          "total": { "type": "integer", "format": "int32" },
          "limit": { "type": "integer", "format": "int32" },
          "offset": { "type": "integer", "format": "int32" },
          "hasMore": { "type": "boolean" }
        },
        "required": ["total", "limit", "offset", "hasMore"]
      },

      "ProjectsListData": {
        "type": "object",
        "properties": {
          "projects": { "type": "array", "items": { "$ref": "#/components/schemas/ProjectBasic" } },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "required": ["projects", "pagination"]
      },

      "ApiResponseImportStarted": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/ImportStartedData" } }
          }
        ]
      },

      "ApiResponseImportStatus": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/ImportStatusData" } }
          }
        ]
      },

      "ApiResponseImportRetry": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/ImportRetryData" } }
          }
        ]
      },

      "ApiResponseGenerateEmail": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/GenerateEmailData" } }
          }
        ]
      },

      "ApiResponseEmailStatus": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/EmailStatusData" } }
          }
        ]
      },

      "ApiResponseProject": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/Project" } }
          }
        ]
      },

      "ApiResponseProjectsList": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/ProjectsListData" } }
          }
        ]
      },

      "Subscriber": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "country": { "type": "string" },
          "language": { "type": "string" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "customFields": { "type": "object", "additionalProperties": true },
          "status": { "type": "string", "enum": ["active", "unsubscribed", "bounced", "complained"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },

      "AddSubscriberRequest": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "country": { "type": "string" },
          "language": { "type": "string" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "customFields": { "type": "object", "additionalProperties": true },
          "projectId": { "type": "string" }
        },
        "required": ["email", "projectId"]
      },

      "BulkImportSubscribersRequest": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddSubscriberRequest" },
            "minItems": 1
          },
          "projectId": { "type": "string" }
        },
        "required": ["subscribers", "projectId"]
      },

      "UnsubscribeRequest": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "allLists": { "type": "boolean", "default": true },
          "tags": { "type": "array", "items": { "type": "string" } },
          "projectId": { "type": "string" }
        },
        "required": ["email", "projectId"]
      },

      "ApiResponseSubscriber": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/Subscriber" } } }
        ]
      },

      "ApiResponseSubscribersList": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Subscriber" }
              },
              "count": { "type": "integer" }
            }
          }
        ]
      },

      "ApiResponseBulkImportResult": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "success": { "type": "integer" },
                  "failed": { "type": "integer" },
                  "updated": { "type": "integer" },
                  "errors": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        ]
      },

      "ApiResponseSuccess": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          { "type": "object", "properties": { "data": { "type": "object", "properties": { "success": { "type": "boolean" } } } } }
        ]
      },

      "ExportFile": {
        "type": "object",
        "properties": {
          "filename": { "type": "string", "description": "Name of the exported file" },
          "url": { "type": "string", "format": "uri", "description": "Download URL for the exported file" },
          "content": { "type": "string", "description": "File content" },
          "format": { "type": "string", "enum": ["html", "hubl", "json", "text"], "description": "Format of the exported file" },
          "description": { "type": "string", "description": "Description of the exported file" },
          "fileSize": { "type": "number", "description": "File size in bytes" }
        },
        "required": ["filename", "content", "format", "description"],
        "additionalProperties": false
      },

      "V1ExportFile": {
        "type": "object",
        "properties": {
          "filename": { "type": "string", "description": "Name of the exported file" },
          "url": { "type": "string", "format": "uri", "description": "Download URL for the exported file" },
          "content": { "type": "string", "description": "File content" },
          "format": { "type": "string", "enum": ["html", "hubl", "json", "text"], "description": "Format of the exported file" },
          "description": { "type": "string", "description": "Description of the exported file" },
          "fileSize": { "type": "number", "description": "File size in bytes" }
        },
        "required": ["filename", "url", "content", "format", "description", "fileSize"],
        "additionalProperties": false
      },

      "StandardExportFile": {
        "type": "object",
        "properties": {
          "filename": { "type": "string", "description": "Name of the exported file" },
          "content": { "type": "string", "description": "File content" },
          "format": { "type": "string", "enum": ["html", "hubl", "json", "text"], "description": "Format of the exported file" },
          "description": { "type": "string", "description": "Description of the exported file" }
        },
        "required": ["filename", "content", "format", "description"],
        "additionalProperties": false
      },

      "ExportData": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/V1ExportFile" },
            "description": "Array of exported files with download URLs and content"
          },
          "executionTime": { "type": "number", "description": "Export execution time in milliseconds" },
          "exportType": { "type": "string", "enum": ["html", "klaviyo", "mailchimp", "hubspot"], "description": "Type of export performed" }
        },
        "required": ["files", "executionTime", "exportType"]
      },

      "StandardExportData": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/StandardExportFile" },
            "description": "Array of exported files with content"
          },
          "executionTime": { "type": "number", "description": "Export execution time in milliseconds" },
          "exportType": { "type": "string", "enum": ["html", "klaviyo", "mailchimp", "hubspot"], "description": "Type of export performed" }
        },
        "required": ["files", "executionTime", "exportType"]
      },

      "ApiResponseExport": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": { "$ref": "#/components/schemas/ExportData" }
            }
          }
        ]
      },

      "ExportStatusData": {
        "type": "object",
        "properties": {
          "conversationId": { "type": "string", "description": "The conversation ID" },
          "canExport": { "type": "boolean", "description": "Whether the conversation can be exported" },
          "availableFormats": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Available export formats for this conversation"
          },
          "reason": { "type": "string", "description": "Reason if export is not available" }
        },
        "required": ["conversationId", "canExport", "availableFormats"]
      },

      "ApiResponseExportStatus": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": { "$ref": "#/components/schemas/ExportStatusData" }
            }
          }
        ]
      },

      "ExportFormat": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Format name" },
          "description": { "type": "string", "description": "Format description" },
          "supportedFormats": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Supported file formats"
          },
          "type": { "type": "string", "enum": ["simple", "complex"], "description": "Export complexity type" }
        },
        "required": ["name", "description", "supportedFormats", "type"]
      },

      "ExportFormatsData": {
        "type": "object",
        "properties": {
          "formats": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ExportFormat" },
            "description": "Available export formats"
          },
          "total": { "type": "integer", "description": "Total number of available formats" }
        },
        "required": ["formats", "total"]
      },

      "ApiResponseExportFormats": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": { "$ref": "#/components/schemas/ExportFormatsData" }
            }
          }
        ]
      },

      "CreateWebhookRequest": {
        "type": "object",
        "properties": {
          "url": { "type": "string", "format": "uri", "description": "The webhook endpoint URL (must be HTTPS)" },
          "events": {
            "type": "array",
            "items": { "type": "string" },
            "minItems": 1,
            "description": "Array of event types to subscribe to (e.g., email.generation.completed)"
          },
          "description": { "type": "string", "description": "Optional description for the webhook" },
          "customHeaders": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Optional custom headers to include in webhook requests"
          }
        },
        "required": ["url", "events"]
      },

      "UpdateWebhookRequest": {
        "type": "object",
        "properties": {
          "url": { "type": "string", "format": "uri", "description": "The webhook endpoint URL (must be HTTPS)" },
          "events": {
            "type": "array",
            "items": { "type": "string" },
            "minItems": 1,
            "description": "Array of event types to subscribe to"
          },
          "active": { "type": "boolean", "description": "Whether the webhook is active" },
          "description": { "type": "string", "description": "Optional description for the webhook" },
          "customHeaders": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Optional custom headers to include in webhook requests"
          }
        }
      },

      "Webhook": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Webhook ID" },
          "url": { "type": "string", "format": "uri", "description": "The webhook endpoint URL" },
          "events": { "type": "array", "items": { "type": "string" }, "description": "Subscribed event types" },
          "active": { "type": "boolean", "description": "Whether the webhook is active" },
          "description": { "type": "string", "description": "Optional description" },
          "successCount": { "type": "integer", "description": "Number of successful deliveries" },
          "failureCount": { "type": "integer", "description": "Number of failed deliveries" },
          "lastTriggeredAt": { "type": "string", "format": "date-time", "description": "Last trigger timestamp" },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        }
      },

      "WebhookWithSecret": {
        "allOf": [
          { "$ref": "#/components/schemas/Webhook" },
          {
            "type": "object",
            "properties": {
              "secret": { "type": "string", "description": "Webhook secret for signature verification (only shown once upon creation)" }
            }
          }
        ]
      },

      "WebhookEvent": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "description": "Event type identifier" },
          "description": { "type": "string", "description": "Event description" }
        }
      },

      "WebhookDelivery": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Delivery ID" },
          "eventId": { "type": "string", "description": "Event ID (for idempotency)" },
          "eventType": { "type": "string", "description": "Event type" },
          "status": { "type": "string", "enum": ["pending", "sending", "success", "failed", "retry"], "description": "Delivery status" },
          "attempts": { "type": "integer", "description": "Number of delivery attempts" },
          "lastAttemptAt": { "type": "string", "format": "date-time", "description": "Last attempt timestamp" },
          "response": {
            "type": "object",
            "properties": {
              "statusCode": { "type": "integer", "description": "HTTP status code" },
              "error": { "type": "string", "description": "Error message if failed" }
            }
          },
          "createdAt": { "type": "string", "format": "date-time", "description": "Creation timestamp" }
        }
      },

      "WebhookStats": {
        "type": "object",
        "properties": {
          "totalWebhooks": { "type": "integer", "description": "Total number of webhooks" },
          "activeWebhooks": { "type": "integer", "description": "Number of active webhooks" },
          "deliveries": {
            "type": "object",
            "properties": {
              "total": { "type": "integer", "description": "Total deliveries" },
              "success": { "type": "integer", "description": "Successful deliveries" },
              "failed": { "type": "integer", "description": "Failed deliveries" },
              "pending": { "type": "integer", "description": "Pending deliveries" }
            }
          }
        }
      },

      "ApiResponseWebhooksList": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "webhooks": { "type": "array", "items": { "$ref": "#/components/schemas/Webhook" } },
                  "total": { "type": "integer" }
                }
              }
            }
          }
        ]
      },

      "ApiResponseWebhookCreated": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": { "$ref": "#/components/schemas/WebhookWithSecret" }
            }
          }
        ]
      },

      "ApiResponseWebhookDetail": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": { "$ref": "#/components/schemas/WebhookWithSecret" }
            }
          }
        ]
      },

      "ApiResponseWebhookEvents": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "events": { "type": "array", "items": { "$ref": "#/components/schemas/WebhookEvent" } },
                  "total": { "type": "integer" }
                }
              }
            }
          }
        ]
      },

      "ApiResponseWebhookStats": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": { "$ref": "#/components/schemas/WebhookStats" }
            }
          }
        ]
      },

      "ApiResponseWebhookTest": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "success": { "type": "boolean" },
                  "statusCode": { "type": "integer" },
                  "responseTime": { "type": "integer", "description": "Response time in milliseconds" }
                }
              }
            }
          }
        ]
      },

      "ApiResponseWebhookDeliveries": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "deliveries": { "type": "array", "items": { "$ref": "#/components/schemas/WebhookDelivery" } },
                  "total": { "type": "integer" }
                }
              }
            }
          }
        ]
      }
    },

    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer token authentication. Use 'Authorization: Bearer <your-jwt-token>' where the JWT token is obtained from the login endpoint."
      }
    }
  }
}
