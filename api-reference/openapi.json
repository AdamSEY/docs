{
  "openapi": "3.1.0",
  "info": {
    "title": "Migma.ai API - Project Import & Email Generation (v1)",
    "description": "API endpoints for importing brand projects from websites and generating emails based on project data.",
    "license": { "name": "MIT" },
    "version": "1.0.0"
  },
  "servers": [
    { "url": "https://api.migma.ai", "description": "Production" },
    { "url": "http://localhost:3002", "description": "Development" }
  ],
  "security": [ { "apiKeyAuth": [] } ],
  "paths": {
    "/v1/projects": {
      "get": {
        "tags": ["Projects"],
        "description": "List projects for the authenticated user.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return (max 100)",
            "schema": { "type": "integer", "format": "int32", "default": 20 }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set",
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by project status (pending|processing|active|error)",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects list response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseProjectsList" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/projects/{projectId}": {
      "get": {
        "tags": ["Projects"],
        "description": "Get a project by ID.",
        "parameters": [
          { "$ref": "#/components/parameters/ProjectIdParam" }
        ],
        "responses": {
          "200": {
            "description": "Project response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseProject" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/projects/import": {
      "post": {
        "tags": ["Import"],
        "description": "Import a brand project from one or more website URLs. Optionally include logo URLs to skip AI logo extraction.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ImportProjectRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import started",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseImportStarted" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/projects/import/{projectId}/status": {
      "get": {
        "tags": ["Import"],
        "description": "Check the status of a project import.",
        "parameters": [ { "$ref": "#/components/parameters/ProjectIdParam" } ],
        "responses": {
          "200": {
            "description": "Import status response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseImportStatus" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/projects/import/{projectId}/retry": {
      "post": {
        "tags": ["Import"],
        "description": "Retry a failed or stuck import for the given project.",
        "parameters": [ { "$ref": "#/components/parameters/ProjectIdParam" } ],
        "responses": {
          "200": {
            "description": "Retry initiated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseImportRetry" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/projects/emails/generate": {
      "post": {
        "tags": ["Email"],
        "description": "Generate an email for a project using its brand context and optional images.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GenerateEmailRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email generation result",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseGenerateEmail" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },

    "/v1/subscribers": {
      "get": {
        "tags": ["Audience"],
        "description": "List subscribers for a project. Requires API key with AUDIENCE_READ.",
        "parameters": [
          { "name": "projectId", "in": "query", "required": true, "schema": { "type": "string" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 20, "maximum": 100 } },
          { "name": "tags", "in": "query", "schema": { "type": "string" }, "description": "Comma-separated tag names" },
          { "name": "status", "in": "query", "schema": { "type": "string", "enum": ["active", "unsubscribed", "bounced", "complained"] } },
          { "name": "search", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Subscribers list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseSubscribersList" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      },
      "post": {
        "tags": ["Audience"],
        "description": "Add a single subscriber. Requires API key with AUDIENCE_WRITE.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddSubscriberRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscriber created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseSubscriber" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/subscribers/bulk": {
      "post": {
        "tags": ["Audience"],
        "description": "Bulk import subscribers. Requires API key with AUDIENCE_WRITE.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BulkImportSubscribersRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk import result",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseBulkImportResult" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },

    "/v1/subscribers/unsubscribe": {
      "post": {
        "tags": ["Audience"],
        "description": "Unsubscribe a subscriber by email. Requires API key with AUDIENCE_WRITE.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UnsubscribeRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unsubscribe success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponseSuccess" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    }
  },

  "components": {
    "parameters": {
      "ProjectIdParam": {
        "name": "projectId",
        "in": "path",
        "required": true,
        "description": "Project ID (MongoDB ObjectId)",
        "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" }
      }
    },

    "responses": {
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/ApiError" } }
        }
      }
    },

    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "data": { "nullable": true },
          "error": { "type": "string", "nullable": true }
        },
        "required": ["success"]
      },

      "ApiError": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "default": false },
          "error": { "type": "string" }
        },
        "required": ["success", "error"]
      },

      "LogoUrls": {
        "type": "object",
        "properties": {
          "primary": { "type": "string", "format": "uri" },
          "secondary": { "type": "string", "format": "uri" },
          "favicon": { "type": "string", "format": "uri" }
        },
        "additionalProperties": false
      },

      "ImportProjectRequest": {
        "type": "object",
        "properties": {
          "urls": {
            "type": "array",
            "items": { "type": "string", "format": "uri" },
            "minItems": 1,
            "maxItems": 10
          },
          "logoUrls": { "$ref": "#/components/schemas/LogoUrls" }
        },
        "required": ["urls"]
      },

      "ImportStartedData": {
        "type": "object",
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "status": { "type": "string", "enum": ["pending"] },
          "domain": { "type": "string" },
          "urls": { "type": "array", "items": { "type": "string", "format": "uri" } },
          "message": { "type": "string" }
        },
        "required": ["projectId", "status", "domain", "urls"]
      },

      "ImportStatusProgress": {
        "type": "object",
        "properties": {
          "stage": { "type": "string", "enum": ["initializing", "analyzing", "completed", "failed", "pending", "processing", "unknown"] },
          "percentage": { "type": "integer", "format": "int32", "minimum": 0, "maximum": 100 }
        },
        "required": ["stage", "percentage"]
      },

      "ImportStatusData": {
        "type": "object",
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "status": { "type": "string", "enum": ["pending", "processing", "active", "error"] },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "domain": { "type": "string" },
          "error": { "type": "string", "nullable": true },
          "progress": { "$ref": "#/components/schemas/ImportStatusProgress" }
        },
        "required": ["status", "name", "description", "progress"]
      },

      "ImportRetryData": {
        "type": "object",
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "status": { "type": "string", "enum": ["pending"] },
          "message": { "type": "string" }
        },
        "required": ["status"]
      },

      "EmailImageSource": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["url"], "default": "url" },
          "url": { "type": "string", "format": "uri" }
        },
        "required": ["type", "url"]
      },

      "EmailImage": {
        "type": "object",
        "properties": {
          "source": { "$ref": "#/components/schemas/EmailImageSource" }
        },
        "required": ["source"]
      },

      "GenerateEmailRequest": {
        "type": "object",
        "properties": {
          "projectId": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "prompt": { "type": "string" },
          "images": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EmailImage" },
            "maxItems": 5
          },
          "model": { "type": "string", "default": "migmaAI-model-v0.1" },
          "webMode": { "type": "boolean", "default": true },
          "languages": {
            "type": "array",
            "items": { "type": "string" },
            "maxItems": 5
          },
          "visibility": {
            "type": "string",
            "enum": ["private", "unlisted", "public"],
            "default": "private",
            "description": "Set the visibility of the generated conversation. Private conversations are only visible to the user, unlisted conversations are accessible via direct link but not listed publicly, and public conversations are visible in the public gallery."
          }
        },
        "required": ["projectId", "prompt"]
      },

      "GenerateEmailData": {
        "type": "object",
        "properties": {
          "content": { "type": "string" },
          "reactEmail": { "type": "string" },
          "html": { "type": "string" },
          "plainText": { "type": "string" },
          "klaviyoHtml": { "type": "string" },
          "metadata": {
            "type": "object",
            "properties": {
              "model": { "type": "string" },
              "generationTime": { "type": "number" },
              "inputTokens": { "type": "number" },
              "outputTokens": { "type": "number" }
            },
            "additionalProperties": true
          },
          "conversationId": { "type": "string" },
          "languages": { "type": "array", "items": { "type": "string" } },
          "enhancedPrompt": { "type": "string" },
          "message": { "type": "string" }
        },
        "required": ["html", "content"]
      },

      "Project": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "status": { "type": "string", "enum": ["pending", "processing", "active", "error"] },
          "companyDetails": { "type": "object", "additionalProperties": true },
          "logoUrls": { "$ref": "#/components/schemas/LogoUrls" },
          "imageUrls": { "type": "array", "items": { "type": "object", "additionalProperties": true } },
          "typography": { "type": "object", "additionalProperties": true },
          "colors": { "type": "object", "additionalProperties": true },
          "screenshotUrl": { "type": "string", "format": "uri" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        },
        "additionalProperties": true
      },

      "Pagination": {
        "type": "object",
        "properties": {
          "total": { "type": "integer", "format": "int32" },
          "limit": { "type": "integer", "format": "int32" },
          "offset": { "type": "integer", "format": "int32" },
          "hasMore": { "type": "boolean" }
        },
        "required": ["total", "limit", "offset", "hasMore"]
      },

      "ProjectsListData": {
        "type": "object",
        "properties": {
          "projects": { "type": "array", "items": { "$ref": "#/components/schemas/Project" } },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "required": ["projects", "pagination"]
      },

      "ApiResponseImportStarted": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/ImportStartedData" } }
          }
        ]
      },

      "ApiResponseImportStatus": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/ImportStatusData" } }
          }
        ]
      },

      "ApiResponseImportRetry": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/ImportRetryData" } }
          }
        ]
      },

      "ApiResponseGenerateEmail": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/GenerateEmailData" } }
          }
        ]
      },

      "ApiResponseProject": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/Project" } }
          }
        ]
      },

      "ApiResponseProjectsList": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": { "data": { "$ref": "#/components/schemas/ProjectsListData" } }
          }
        ]
      },

      "Subscriber": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "country": { "type": "string" },
          "language": { "type": "string" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "customFields": { "type": "object", "additionalProperties": true },
          "status": { "type": "string", "enum": ["active", "unsubscribed", "bounced", "complained"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },

      "AddSubscriberRequest": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "country": { "type": "string" },
          "language": { "type": "string" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "customFields": { "type": "object", "additionalProperties": true },
          "projectId": { "type": "string" }
        },
        "required": ["email", "projectId"]
      },

      "BulkImportSubscribersRequest": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddSubscriberRequest" },
            "minItems": 1
          },
          "projectId": { "type": "string" }
        },
        "required": ["subscribers", "projectId"]
      },

      "UnsubscribeRequest": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "allLists": { "type": "boolean", "default": true },
          "tags": { "type": "array", "items": { "type": "string" } },
          "projectId": { "type": "string" }
        },
        "required": ["email", "projectId"]
      },

      "ApiResponseSubscriber": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/Subscriber" } } }
        ]
      },

      "ApiResponseSubscribersList": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Subscriber" }
              },
              "count": { "type": "integer" }
            }
          }
        ]
      },

      "ApiResponseBulkImportResult": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "success": { "type": "integer" },
                  "failed": { "type": "integer" },
                  "updated": { "type": "integer" },
                  "errors": { "type": "array", "items": { "type": "string" } }
                }
              }
            }
          }
        ]
      },

      "ApiResponseSuccess": {
        "allOf": [
          { "$ref": "#/components/schemas/ApiResponse" },
          { "type": "object", "properties": { "data": { "type": "object", "properties": { "success": { "type": "boolean" } } } } }
        ]
      }
    },

    "securitySchemes": {
      "apiKeyAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API-Key",
        "description": "API Key authentication using Authorization header. Use 'Authorization: Bearer sk_live_your_key_here' or 'Authorization: ApiKey sk_live_your_key_here'. Also supports 'X-API-Key: sk_live_your_key_here' as fallback."
      }
    }
  }
}