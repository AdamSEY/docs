{
  "openapi": "3.1.0",
  "info": {
    "title": "Migma.ai API - Project Import & Email Generation (v1)",
    "description": "API endpoints for importing brand projects from websites and generating emails based on project data.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.migma.ai",
      "description": "Production"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Projects",
        "description": "List projects for the authenticated user with basic information only. Use GET /v1/projects/{projectId} to get full project details.",
        "operationId": "ListProjects",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by project status (pending|processing|active|error)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects list response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseProjectsList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project Details",
        "description": "Get complete project details by ID, including branding information, colors, typography, and all project data.",
        "operationId": "GetProjectDetails",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID (MongoDB ObjectId)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseProject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/projects/import": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Import Project",
        "description": "Import a brand project from one or more website URLs. Optionally include logo URLs to skip AI logo extraction.",
        "operationId": "ImportProject",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseImportStarted"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/projects/import/{projectId}/status": {
      "get": {
        "tags": [
          "Import"
        ],
        "summary": "Get Import Status",
        "description": "Check the status of a project import.",
        "operationId": "GetImportStatus",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID (MongoDB ObjectId)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Import status response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseImportStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/projects/import/{projectId}/retry": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Retry Import",
        "description": "Retry a failed or stuck import for the given project.",
        "operationId": "RetryImport",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID (MongoDB ObjectId)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retry initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseImportRetry"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/projects/emails/generate": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Generate Email (Async)",
        "description": "Generate an email for a project using its brand context and optional images. You can also provide a referenceId pointing to an existing conversation to remix its content. Returns immediately with a conversationId and 'pending' status. Use GET /v1/projects/emails/{conversationId}/status to check generation progress. Once completed, use the export endpoint to retrieve the HTML/React code.",
        "operationId": "GenerateEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email generation started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseGenerateEmail"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/projects/emails/{conversationId}/status": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Get Email Generation Status",
        "description": "Check the status of an email generation. Returns basic information like subject and generation metadata when completed. To retrieve the HTML/React code, use the export endpoint.",
        "operationId": "GetEmailGenerationStatus",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID returned from the generate endpoint",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseEmailStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/emails/test/send": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Send Test Email",
        "description": "Send a test email from a completed conversation using Migma's system email service. Extracts the React Email template from the conversation and sends it to the specified recipients. Requires API key with EMAIL_SEND permission.",
        "operationId": "SendTestEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTestEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseTestEmailSent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/shopify/connect": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Connect Shopify Store",
        "description": "Connect a Shopify store to a project. Requires API key with EMAIL_READ permission.",
        "operationId": "ConnectShopifyStore",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectShopifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shopify store connected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseShopifyConnect"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/subscribers": {
      "get": {
        "tags": [
          "Audience"
        ],
        "summary": "List Subscribers",
        "description": "List subscribers for a project. Requires API key with AUDIENCE_READ.",
        "operationId": "ListSubscribers",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated tag names",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by subscriber status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "unsubscribed",
                "bounced",
                "complained"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search query to filter subscribers",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscribers list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseSubscribersList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Audience"
        ],
        "summary": "Add Subscriber",
        "description": "Add a single subscriber. Requires API key with AUDIENCE_WRITE.",
        "operationId": "AddSubscriber",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSubscriberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscriber created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseSubscriber"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/subscribers/bulk": {
      "post": {
        "tags": [
          "Audience"
        ],
        "summary": "Bulk Import Subscribers",
        "description": "Bulk import subscribers. Requires API key with AUDIENCE_WRITE.",
        "operationId": "BulkImportSubscribers",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkImportSubscribersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk import result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseBulkImportResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v1/subscribers/unsubscribe": {
      "post": {
        "tags": [
          "Audience"
        ],
        "summary": "Unsubscribe Subscriber",
        "description": "Unsubscribe a subscriber by email. Requires API key with AUDIENCE_WRITE.",
        "operationId": "UnsubscribeSubscriber",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnsubscribeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unsubscribe success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/export/html/{conversationId}": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export HTML",
        "description": "Export conversation as standard HTML.",
        "operationId": "ExportHTML",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID to export",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HTML export successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseExport"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/export/klaviyo/{conversationId}": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export Klaviyo",
        "description": "Export conversation as Klaviyo-compatible HTML with editable regions.",
        "operationId": "ExportKlaviyo",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "description": "The conversation ID to export",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "klaviyoType",
            "in": "query",
            "description": "Type of Klaviyo export: 'html' for static HTML or 'hybrid' for dynamic hybrid with editable regions",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "html",
                "hybrid"
              ],
              "default": "hybrid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Klaviyo export successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseExport"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/export/mailchimp/{conversationId}": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export Mailchimp",
        "description": "Export conversation as Mailchimp-compatible HTML. Returns URLs for file downloads.",
        "operationId": "ExportMailchimp",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID to export",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailchimp export successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseExport"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/export/mjml/{conversationId}": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export MJML",
        "description": "Export conversation as MJML (Mailjet Markup Language) responsive email template. Returns URLs for file downloads.",
        "operationId": "ExportMJML",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID to export",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MJML export successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseExport"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/export/hubspot": {
      "post": {
        "tags": [
          "Export"
        ],
        "summary": "Export HubSpot",
        "description": "Export conversation as HubSpot-compatible HTML and HubL files.",
        "operationId": "ExportHubSpot",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conversationId": {
                    "type": "string",
                    "description": "The conversation ID to export"
                  },
                  "customOptions": {
                    "type": "object",
                    "description": "Custom options for HubSpot export",
                    "properties": {
                      "customInstructions": {
                        "type": "string",
                        "description": "Custom instructions for the export"
                      }
                    }
                  }
                },
                "required": [
                  "conversationId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "HubSpot export successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseExport"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/export/status/{conversationId}": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Get Export Status",
        "description": "Check export availability for a conversation",
        "operationId": "GetExportStatus",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "The conversation ID to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Export status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseExportStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/export/formats": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "List Export Formats",
        "description": "Get available export formats",
        "operationId": "ListExportFormats",
        "responses": {
          "200": {
            "description": "Available export formats retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseExportFormats"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - Missing required permissions or access denied",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      }
    },
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "success"
        ]
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "LogoUrls": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "string",
            "format": "uri"
          },
          "secondary": {
            "type": "string",
            "format": "uri"
          },
          "favicon": {
            "type": "string",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "ImportProjectRequest": {
        "type": "object",
        "properties": {
          "urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "minItems": 1,
            "maxItems": 10
          },
          "logoUrls": {
            "$ref": "#/components/schemas/LogoUrls"
          }
        },
        "required": [
          "urls"
        ]
      },
      "ImportStartedData": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending"
            ]
          },
          "domain": {
            "type": "string"
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "status",
          "domain",
          "urls"
        ]
      },
      "ImportStatusProgress": {
        "type": "object",
        "properties": {
          "stage": {
            "type": "string",
            "enum": [
              "initializing",
              "analyzing",
              "completed",
              "failed",
              "pending",
              "processing",
              "unknown"
            ]
          },
          "percentage": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          }
        },
        "required": [
          "stage",
          "percentage"
        ]
      },
      "ImportStatusData": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "active",
              "error"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "progress": {
            "$ref": "#/components/schemas/ImportStatusProgress"
          }
        },
        "required": [
          "status",
          "name",
          "description",
          "progress"
        ]
      },
      "ImportRetryData": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending"
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "status"
        ]
      },
      "EmailImageSource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "url"
            ],
            "default": "url"
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "type",
          "url"
        ]
      },
      "EmailImage": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/EmailImageSource"
          }
        },
        "required": [
          "source"
        ]
      },
      "GenerateEmailRequest": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "prompt": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailImage"
            },
            "maxItems": 5
          },
          "model": {
            "type": "string",
            "default": "migmaAI-model-v0.1"
          },
          "webMode": {
            "type": "boolean",
            "default": true,
            "description": "Allow MigmaAI to do research, use connectors, mcp and more. It may take longer to generate the email. Use only if the prompt is unclear or requires additional information."
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 5,
            "description": "The languages to generate the email in. If not provided, the email will be generated as instructed by the prompt."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "private",
              "unlisted",
              "public"
            ],
            "default": "private",
            "description": "Set the visibility of the generated conversation. Private conversations are only visible to the user, unlisted conversations are accessible via direct link but not listed publicly, and public conversations are visible in the public gallery."
          },
          "referenceId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "Optional conversation ID to remix so you can create personalized variants from an existing conversation."
          }
        },
        "required": [
          "projectId",
          "prompt"
        ]
      },
      "GenerateEmailData": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "The conversation ID to check status and retrieve results"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending"
            ],
            "description": "Initial status is always pending"
          },
          "message": {
            "type": "string",
            "description": "Information message about the generation process"
          },
          "link": {
            "type": "string",
            "format": "uri",
            "description": "Direct link to view the email in Migma dashboard (https://migma.ai/chat?c={conversationId})"
          }
        },
        "required": [
          "conversationId",
          "status",
          "message",
          "link"
        ]
      },
      "EmailStatusData": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "completed",
              "failed"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "type": "string",
            "description": "Error message if status is failed"
          },
          "result": {
            "type": "object",
            "description": "Basic email information (only present when status is completed). Use the export endpoint to retrieve HTML/React code.",
            "properties": {
              "subject": {
                "type": "string",
                "description": "Email subject line"
              },
              "languages": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Languages the email was generated in"
              }
            }
          }
        },
        "required": [
          "conversationId",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "Project": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "active",
              "error"
            ]
          },
          "companyDetails": {
            "type": "object",
            "additionalProperties": true
          },
          "logoUrls": {
            "$ref": "#/components/schemas/LogoUrls"
          },
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "typography": {
            "type": "object",
            "additionalProperties": true
          },
          "colors": {
            "type": "object",
            "additionalProperties": true
          },
          "screenshotUrl": {
            "type": "string",
            "format": "uri"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": true
      },
      "ProjectBasic": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "active",
              "error"
            ]
          },
          "domain": {
            "type": "string"
          },
          "logoUrls": {
            "$ref": "#/components/schemas/LogoUrls"
          },
          "screenshotUrl": {
            "type": "string",
            "format": "uri"
          },
          "email_create_suggestions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "AI-generated suggestions for email content creation based on the project context"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "_id",
          "name",
          "description",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "hasMore": {
            "type": "boolean"
          }
        },
        "required": [
          "total",
          "limit",
          "offset",
          "hasMore"
        ]
      },
      "ProjectsListData": {
        "type": "object",
        "properties": {
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectBasic"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "projects",
          "pagination"
        ]
      },
      "ApiResponseImportStarted": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ImportStartedData"
              }
            }
          }
        ]
      },
      "ApiResponseImportStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ImportStatusData"
              }
            }
          }
        ]
      },
      "ApiResponseImportRetry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ImportRetryData"
              }
            }
          }
        ]
      },
      "ApiResponseGenerateEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/GenerateEmailData"
              }
            }
          }
        ]
      },
      "ApiResponseEmailStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/EmailStatusData"
              }
            }
          }
        ]
      },
      "SendTestEmailRequest": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "The conversation ID containing the email to send"
          },
          "to": {
            "type": "string",
            "format": "email",
            "description": "Recipient email address"
          }
        },
        "required": [
          "conversationId",
          "to"
        ]
      },
      "TestEmailSentData": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "description": "Message ID from the email service"
          },
          "conversationId": {
            "type": "string",
            "description": "The conversation ID that was used"
          },
          "sentTo": {
            "type": "string",
            "format": "email",
            "description": "Recipient email address"
          },
          "sentAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the email was sent"
          },
          "subject": {
            "type": "string",
            "description": "The subject line that was sent"
          }
        },
        "required": [
          "messageId",
          "conversationId",
          "sentTo",
          "sentAt",
          "subject"
        ]
      },
      "ApiResponseTestEmailSent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/TestEmailSentData"
              }
            }
          }
        ]
      },
      "ConnectShopifyRequest": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "The project ID to connect the Shopify store to"
          },
          "shopifyStoreUrl": {
            "type": "string",
            "format": "uri",
            "description": "The Shopify store URL (e.g., https://example.com or https://store.myshopify.com)"
          }
        },
        "required": [
          "projectId",
          "shopifyStoreUrl"
        ]
      },
      "ShopifyConnectData": {
        "type": "object",
        "properties": {
          "serverId": {
            "type": "string",
            "description": "The MCP server ID created for this Shopify connection"
          },
          "projectId": {
            "type": "string",
            "description": "The project ID"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected"
            ],
            "description": "Connection status: 'connected' (successful)"
          },
          "message": {
            "type": "string",
            "description": "Status message"
          },
          "store": {
            "type": "string",
            "description": "The Shopify store name extracted from the URL"
          },
          "toolsEnabled": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of enabled Shopify tool names"
          }
        },
        "required": [
          "serverId",
          "projectId",
          "status",
          "message",
          "store",
          "toolsEnabled"
        ]
      },
      "ApiResponseShopifyConnect": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ShopifyConnectData"
              }
            }
          }
        ]
      },
      "ApiResponseProject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        ]
      },
      "ApiResponseProjectsList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ProjectsListData"
              }
            }
          }
        ]
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": true
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "unsubscribed",
              "bounced",
              "complained"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AddSubscriberRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": true
          },
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "projectId"
        ]
      },
      "BulkImportSubscribersRequest": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddSubscriberRequest"
            },
            "minItems": 1
          },
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "subscribers",
          "projectId"
        ]
      },
      "UnsubscribeRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "allLists": {
            "type": "boolean",
            "default": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "projectId"
        ]
      },
      "ApiResponseSubscriber": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Subscriber"
              }
            }
          }
        ]
      },
      "ApiResponseSubscribersList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              },
              "count": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "ApiResponseBulkImportResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "integer"
                  },
                  "failed": {
                    "type": "integer"
                  },
                  "updated": {
                    "type": "integer"
                  },
                  "errors": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ApiResponseSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ]
      },
      "ExportFile": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Name of the exported file"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Download URL for the exported file"
          },
          "content": {
            "type": "string",
            "description": "File content"
          },
          "format": {
            "type": "string",
            "enum": [
              "html",
              "hubl",
              "json",
              "text",
              "mjml"
            ],
            "description": "Format of the exported file"
          },
          "description": {
            "type": "string",
            "description": "Description of the exported file"
          },
          "fileSize": {
            "type": "number",
            "description": "File size in bytes"
          }
        },
        "required": [
          "filename",
          "content",
          "format",
          "description"
        ],
        "additionalProperties": false
      },
      "V1ExportFile": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Name of the exported file"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Download URL for the exported file"
          },
          "content": {
            "type": "string",
            "description": "File content"
          },
          "format": {
            "type": "string",
            "enum": [
              "html",
              "hubl",
              "json",
              "text",
              "mjml"
            ],
            "description": "Format of the exported file"
          },
          "description": {
            "type": "string",
            "description": "Description of the exported file"
          },
          "fileSize": {
            "type": "number",
            "description": "File size in bytes"
          }
        },
        "required": [
          "filename",
          "url",
          "content",
          "format",
          "description",
          "fileSize"
        ],
        "additionalProperties": false
      },
      "StandardExportFile": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Name of the exported file"
          },
          "content": {
            "type": "string",
            "description": "File content"
          },
          "format": {
            "type": "string",
            "enum": [
              "html",
              "hubl",
              "json",
              "text",
              "mjml"
            ],
            "description": "Format of the exported file"
          },
          "description": {
            "type": "string",
            "description": "Description of the exported file"
          }
        },
        "required": [
          "filename",
          "content",
          "format",
          "description"
        ],
        "additionalProperties": false
      },
      "ExportData": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V1ExportFile"
            },
            "description": "Array of exported files with download URLs and content"
          },
          "executionTime": {
            "type": "number",
            "description": "Export execution time in milliseconds"
          },
          "exportType": {
            "type": "string",
            "enum": [
              "html",
              "klaviyo",
              "mailchimp",
              "mjml",
              "hubspot"
            ],
            "description": "Type of export performed"
          }
        },
        "required": [
          "files",
          "executionTime",
          "exportType"
        ]
      },
      "StandardExportData": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardExportFile"
            },
            "description": "Array of exported files with content"
          },
          "executionTime": {
            "type": "number",
            "description": "Export execution time in milliseconds"
          },
          "exportType": {
            "type": "string",
            "enum": [
              "html",
              "klaviyo",
              "mailchimp",
              "mjml",
              "hubspot"
            ],
            "description": "Type of export performed"
          }
        },
        "required": [
          "files",
          "executionTime",
          "exportType"
        ]
      },
      "ApiResponseExport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ExportData"
              }
            }
          }
        ]
      },
      "ExportStatusData": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "The conversation ID"
          },
          "canExport": {
            "type": "boolean",
            "description": "Whether the conversation can be exported"
          },
          "availableFormats": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Available export formats for this conversation"
          },
          "reason": {
            "type": "string",
            "description": "Reason if export is not available"
          }
        },
        "required": [
          "conversationId",
          "canExport",
          "availableFormats"
        ]
      },
      "ApiResponseExportStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ExportStatusData"
              }
            }
          }
        ]
      },
      "ExportFormat": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Format name"
          },
          "description": {
            "type": "string",
            "description": "Format description"
          },
          "supportedFormats": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Supported file formats"
          },
          "type": {
            "type": "string",
            "enum": [
              "simple",
              "complex"
            ],
            "description": "Export complexity type"
          }
        },
        "required": [
          "name",
          "description",
          "supportedFormats",
          "type"
        ]
      },
      "ExportFormatsData": {
        "type": "object",
        "properties": {
          "formats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportFormat"
            },
            "description": "Available export formats"
          },
          "total": {
            "type": "integer",
            "description": "Total number of available formats"
          }
        },
        "required": [
          "formats",
          "total"
        ]
      },
      "ApiResponseExportFormats": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ExportFormatsData"
              }
            }
          }
        ]
      },
      "CreateWebhookRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The webhook endpoint URL (must be HTTPS)"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "description": "Array of event types to subscribe to (e.g., email.generation.completed)"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the webhook"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional custom headers to include in webhook requests"
          }
        },
        "required": [
          "url",
          "events"
        ]
      },
      "UpdateWebhookRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The webhook endpoint URL (must be HTTPS)"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "description": "Array of event types to subscribe to"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the webhook is active"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the webhook"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional custom headers to include in webhook requests"
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Webhook ID"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The webhook endpoint URL"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Subscribed event types"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the webhook is active"
          },
          "description": {
            "type": "string",
            "description": "Optional description"
          },
          "successCount": {
            "type": "integer",
            "description": "Number of successful deliveries"
          },
          "failureCount": {
            "type": "integer",
            "description": "Number of failed deliveries"
          },
          "lastTriggeredAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last trigger timestamp"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "WebhookWithSecret": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Webhook"
          },
          {
            "type": "object",
            "properties": {
              "secret": {
                "type": "string",
                "description": "Webhook secret for signature verification (only shown once upon creation)"
              }
            }
          }
        ]
      },
      "WebhookEvent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Event type identifier"
          },
          "description": {
            "type": "string",
            "description": "Event description"
          }
        }
      },
      "WebhookDelivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Delivery ID"
          },
          "eventId": {
            "type": "string",
            "description": "Event ID (for idempotency)"
          },
          "eventType": {
            "type": "string",
            "description": "Event type"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "sending",
              "success",
              "failed",
              "retry"
            ],
            "description": "Delivery status"
          },
          "attempts": {
            "type": "integer",
            "description": "Number of delivery attempts"
          },
          "lastAttemptAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last attempt timestamp"
          },
          "response": {
            "type": "object",
            "properties": {
              "statusCode": {
                "type": "integer",
                "description": "HTTP status code"
              },
              "error": {
                "type": "string",
                "description": "Error message if failed"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        }
      },
      "WebhookStats": {
        "type": "object",
        "properties": {
          "totalWebhooks": {
            "type": "integer",
            "description": "Total number of webhooks"
          },
          "activeWebhooks": {
            "type": "integer",
            "description": "Number of active webhooks"
          },
          "deliveries": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total deliveries"
              },
              "success": {
                "type": "integer",
                "description": "Successful deliveries"
              },
              "failed": {
                "type": "integer",
                "description": "Failed deliveries"
              },
              "pending": {
                "type": "integer",
                "description": "Pending deliveries"
              }
            }
          }
        }
      },
      "ApiResponseWebhooksList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Webhook"
                    }
                  },
                  "total": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "ApiResponseWebhookCreated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/WebhookWithSecret"
              }
            }
          }
        ]
      },
      "ApiResponseWebhookDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/WebhookWithSecret"
              }
            }
          }
        ]
      },
      "ApiResponseWebhookEvents": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "events": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WebhookEvent"
                    }
                  },
                  "total": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "ApiResponseWebhookStats": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/WebhookStats"
              }
            }
          }
        ]
      },
      "ApiResponseWebhookTest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean"
                  },
                  "statusCode": {
                    "type": "integer"
                  },
                  "responseTime": {
                    "type": "integer",
                    "description": "Response time in milliseconds"
                  }
                }
              }
            }
          }
        ]
      },
      "ApiResponseWebhookDeliveries": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "deliveries": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WebhookDelivery"
                    }
                  },
                  "total": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer token authentication. Use 'Authorization: Bearer <your-jwt-token>' where the JWT token is obtained from the login endpoint."
      }
    }
  }
}
